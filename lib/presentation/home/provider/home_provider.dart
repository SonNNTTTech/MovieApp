import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:test_app/presentation/home/state/home_state.dart';
import 'package:test_app/presentation/home/entity/home_entity.dart';
import 'package:test_app/repository/movie/movie_repository.dart';
import 'package:test_app/shared/app_enum.dart';

import '../../../repository/movie/movie_model.dart';
import '../entity/movie_entity.dart';

part 'home_provider.g.dart';

//Generated by @riverpod
// final homeNotifierProvider =
//     NotifierProvider<HomeNotifier, HomeState>(HomeNotifier.new);

@Riverpod(dependencies: [])
class HomeNotifier extends _$HomeNotifier {
  late final movieRepo = ref.read(movieRepoProvider);
  @override
  HomeState build() {
    var initialTab = MovieType.popular;
    Future.delayed(Duration.zero, () {
      reloadPage(initialTab);
    });
    return HomeState(mapState: {
      for (var key in MovieType.values) key: HomeEntity(movies: [])
    }, tab: initialTab);
  }

  Future reloadPage(MovieType type) async {
    Map<MovieType, HomeEntity> data = Map.from(state.mapState);
    var result = await movieRepo.callMovieByType(type);
    result.fold((left) => null, (response) {
      data[type]?.movies = toListMovieEntity(response);
      data[type]?.isLoading = false;
      state = state.copyWith(mapState: data);
    });
  }

  Future getNewPage(MovieType type) async {
    Map<MovieType, HomeEntity> data = Map.from(state.mapState);
    var result = await movieRepo.callMovieByType(type,
        page: 1 + (data[type]!.movies.length / 20).floor());
    result.fold((left) => null, (response) {
      data[type]?.movies.addAll(toListMovieEntity(response));
      state = state.copyWith(mapState: data);
    });
  }

  void changeTab(MovieType newTab) {
    if (state.tab == newTab) return;

    state = state.copyWith(tab: newTab);

    if (state.mapState[newTab]!.movies.isEmpty) {
      reloadPage(newTab);
    }
  }

  List<MovieEntity> toListMovieEntity(MovieResponse movie) {
    var list = movie.results ?? [];
    return list
        .map((e) => MovieEntity(
            name: e.title ?? '',
            date: e.releaseDate != null
                ? DateTime.parse(e.releaseDate!)
                : DateTime.now(),
            imageUrl:
                'https://image.tmdb.org/t/p/w220_and_h330_face${e.posterPath ?? ''}',
            rate: ((e.voteAverage ?? 0) * 10).round()))
        .toList();
  }
}
