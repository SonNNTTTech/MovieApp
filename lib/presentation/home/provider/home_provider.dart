import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:test_app/presentation/home/state/home_state.dart';
import 'package:test_app/presentation/home/entity/home_entity.dart';
import 'package:test_app/repository/movie/movie_repository.dart';
import 'package:test_app/shared/app_enum.dart';

part 'home_provider.g.dart';

//Generated by @riverpod
// final homeNotifierProvider =
//     NotifierProvider<HomeNotifier, HomeState>(HomeNotifier.new);

@riverpod
class HomeNotifier extends _$HomeNotifier {
  late final movieRepo = ref.read(movieRepoProvider);
  @override
  HomeState build() {
    const initialTab = MovieType.popular;
    return HomeState(mapState: {
      for (final key in MovieType.values) key: HomeEntity(movies: [])
    }, tab: initialTab);
  }

  Future reloadPage(MovieType type) async {
    Map<MovieType, HomeEntity> data = Map.from(state.mapState);
    final result = await movieRepo.callMovieByType(type);
    result.fold((left) => null, (list) {
      data[type]?.movies = list;
      data[type]?.isLoading = false;
      state = state.copyWith(mapState: data);
    });
  }

  Future getNewPage(MovieType type) async {
    Map<MovieType, HomeEntity> data = Map.from(state.mapState);
    final result = await movieRepo.callMovieByType(type,
        page: 1 + ((data[type]?.movies.length ?? 0) / 20).floor());
    result.fold((left) => null, (list) {
      data[type]?.movies.addAll(list);
      state = state.copyWith(mapState: data);
    });
  }

  void changeTab(MovieType newTab) {
    if (state.tab == newTab) return;

    state = state.copyWith(tab: newTab);
  }
}
